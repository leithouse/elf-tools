/**
 * Section Header Type
 * @reference elf/common.h
 * @type {JSON}
 */
const SHT = {
  toString:()=>'SHT_',
  NULL	        :0,		/* Section header table entry unused */
  PROGBITS	:1,		/* Program specific (private) data */
  SYMTAB	:2,		/* Link editing symbol table */
  STRTAB	:3,		/* A string table */
  RELA          :4,		/* Relocation entries with addends */
  HASH          :5,		/* A symbol hash table */
  DYNAMIC	:6,		/* Information for dynamic linking */
  NOTE          :7,		/* Information that marks file */
  NOBITS	:8,		/* Section occupies no space in file */
  REL		:9,		/* Relocation entries, no addends */
  SHLIB        :10,		/* Reserved, unspecified semantics */
  DYNSYM       :11,		/* Dynamic linking symbol table */

  INIT_ARRAY	:14,		/* Array of ptrs to init functions */
  FINI_ARRAY	:15,		/* Array of ptrs to finish functions */
  PREINIT_ARRAY :16,		/* Array of ptrs to pre-init funcs */
  GROUP	        :17,		/* Section contains a section group */
  SYMTAB_SHNDX  :18,		/* Indices for SHN_XINDEX entries */

  LOOS	:0x60000000,	/* First of OS specific semantics */
  HIOS	:0x6fffffff,	/* Last of OS specific semantics */

  GNU_INCREMENTAL_INPUTS :0x6fff4700,   /* incremental build data */
  GNU_ATTRIBUTES :0x6ffffff5,	/* Object attributes */
  GNU_HASH	  :0x6ffffff6,	/* GNU style symbol hash table */
  GNU_LIBLIST	  :0x6ffffff7,	/* List of prelink dependencies */

/* The next three section types are defined by Solaris, and are named
   SHT_SUNW*.  We use them in GNU code, so we also define SHT_GNU*
   versions.  */
  SUNW_verdef	:0x6ffffffd,	/* Versions defined by file */
  SUNW_verneed :0x6ffffffe,	/* Versions needed by file */
  SUNW_versym	:0x6fffffff,	/* Symbol versions */


  LOPROC	:0x70000000,	/* Processor-specific semantics, lo */
  HIPROC	:0x7FFFFFFF,	/* Processor-specific semantics, hi */
  LOUSER	:0x80000000,	/* Application-specific semantics */
/*   HIUSER	:0x8FFFFFFF,    *//* Application-specific semantics */
  HIUSER	:0xFFFFFFFF,	/* New value, defined in Oct 4, 1999 Draft */
}
SHT.GNU_verdef	=SHT.SUNW_verdef;
SHT.GNU_verneed	=SHT.SUNW_verneed;
SHT.GNU_versym	=SHT.SUNW_versym;



// elf/ia64.h
Object.assign(SHT,{
  IA_64_EXT	:(SHT.LOPROC + 0),	/* Extension bits.  */
  IA_64_UNWIND	:(SHT.LOPROC + 1),	/* Unwind bits.  */
  IA_64_LOPSREG	:(SHT.LOPROC + 0x8000000),
/* ABI says (SHT_LOPROC + 0xfffffff) but I think it's a typo -- this makes sense.  */
  IA_64_HIPSREG	:(SHT.LOPROC + 0x8ffffff),
  IA_64_PRIORITY_INIT :(SHT.LOPROC + 0x9000000),

/* SHT_IA_64_HP_OPT_ANOT is only generated by HPUX compilers for its
   optimization annotation section.  GCC does not generate it but we
   want readelf to know what they are.  Do not use two capital Ns in
   annotate or sed will turn it into 32 or 64 during the build.  */
  IA_64_HP_OPT_ANOT	:0x60000004,

/* OpenVMS section types.  */
/* The section contains PC-to-source correlation information for use by the
   VMS RTL's traceback facility.  */
  IA_64_VMS_TRACE             :0x60000000,
/* The section contains routine signature information for use by the
   translated image executive.  */
  IA_64_VMS_TIE_SIGNATURES    :0x60000001,
/* The section contains dwarf-3 information.  */
  IA_64_VMS_DEBUG             :0x60000002,
/* The section contains the dwarf-3 string table.  */
  IA_64_VMS_DEBUG_STR         :0x60000003,
/* The section contains linkage information to perform consistency checking
   accross object modules.  */
  IA_64_VMS_LINKAGES          :0x60000004,
/* The section allows the symbol vector in an image to be location through
   the section table.  */
  IA_64_VMS_SYMBOL_VECTOR     :0x60000005,
/* The section contains inter-image fixups.  */
  IA_64_VMS_FIXUP             :0x60000006,
/* The section contains unmangled name info.  */
  IA_64_VMS_DISPLAY_NAME_INFO :0x60000007,
});


module.exports = SHT;
